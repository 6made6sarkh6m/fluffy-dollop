04/09/20:
	1) в жаваскрипте прямых констант не бывает. Обьявив любую
	   переменную в константе изменить нельзя, но если создать
	   обьект в константе с элементами, то их можно изменить.
	   Proof: const object = {obj1: 10, obj: 20};
		  object.obj1 = object.obj1 + object.obj2;
		  console.log(object);

	2) в 2020 обьявлять переменную через var - это кринж.
	   Пушто тип var существует до того как ты ее обьявляешь и
	   виден везде.
           Proof: console.log(name);
		  var name = 'Amadeus'; - называется hoisting. Всплытие переменных

	3) let и const могут быть видны только в своих блоках кода.
	   example and proof: {
				let number = 100;
				}
				console.log(number);
	4) 'use strict' дает понять браузеру что мы работаем в современном
		режиме. Где он может подрубать все последние фичи жаваскрипта.
		Строгий режим позволяет избавляться от некоторых неточностей которые были в языке.
		И теперь не допускает их работы.
	5) Обьекты можно отображать посредством создания {}. Внутри 
		обьекта все что пишется является его свойством.
		example: const Item = {
				name : 'Dragonslayer',
				type : 'heavy sword',
				damage : 999
				};
	6) Массив является частным случаем обьекта, а не отдельным типом данных.
		У обьектов свойства прописываются посредством ключа : значения.
		У массива его данные могут быть значениями, а их индексы ключами.

05/09/20
	1) Интерполяция появилась в ES6 для записи переменных(обьектов в строки). Вместо обычных знаков строки("" или '') можно ставить бэктики(``)
		Proof: const category = 'games';
				console.log('https://playstationstore.com/' + category + '/' + 5);
				Вместо того чтобы ставить знаки строк и использовать конкатинацию значений и переменных 
				можно воспользоваться интерполяцией 
				
				const category = games;
				console.log(`https://playstationstore.com/${category}/5`);

	2) Унарный плюс - это плюсик который стоит перед чем то. Можно его использовать для преобразования строки в число.
		Proof: console.log(5 + '4');
				OUTPUT: 54 - произошла обычная конкатинация, где 5 превратилась в строку

				Использование унарного плюса:
				console.log(5 + +'4');
				OUTPUT: 9 - унарный плюс преобразовал строчную четверку в числовое, после произвел операцию суммирования.

	3) Операторы инкримента и дикремента (i++ и i--), могут быть реализованы префиксно и постфиксно.
		i++ , i-- = это постфискные операторы, так как они написаны после переменной
		++i , --i = это префиксные.
		Различием между ними является то, что при вызове переменной с постфиксным оператором ничего не изменится.
			let i = 10;
			example: console.log(i++);
		Потому что при вызове в функцию записывается старое значение и оно же и выводится.
		
		Если же вызывать в префиксной форме, то записываются уже измененные значения и выводятся.

06/09/20
	1) Операторы равенства. "==" - это простое равенство, которое может определять по числу
		example: console.log(2 * 4 == '8');
		OUTPUT: TRUE;
		"===" - это строгое равенство, которое определяет по типу данных.
		example: console.log(2 * 4 === '8');
		OUTPUT: FALSE;

07/09/20
	1) Git  - git init = для создания папки репозитория проекта в компе
			  git config = для конфигурации репозитория проекта
			  git add -A или git add path/path/..../file-name  = для добавления файлов в индекс
			  git status = для просмотра состояния файлов.
	2) Github - git remote add *namespace* *http address* = добавляет новый удаленный репозиторий для связки с локальным
				git branch -M master создает ветку мастера(в дальнейшем можно создавать другие вторичные вети для коммита)
<<<<<<< HEAD
				git push -u *namespace* *branch_name* = пушит твой репо в удаленный на гитхабе. -u означает, что все дальнейшие пушы в гитхаб
=======
				git push -u *namespace* *branch_name* = пушит твой репо в удаленный на гитхабе -u означает, что все дальнейшие пушы в гитхаб
<<<<<<< HEAD
>>>>>>> 6f7d994b2b4ea3fd1d2c44deab893ff958070d87
				с этого репо будут идти по умолчанию.
09/09/20
	1) Github - git pull = вытаскивает с гитхаба файлы с последними изменениями и ставит на место текущего кода
	2) git clone ссылка репо = клонирует репозиторий в текущей директории
=======
				с этого репо будут идти по умолчанию.
10/09/20
	1) Запись в обьекты лучше прописывать через квадратные скобки вместо точки. Не все браузеры поддерживают опцию записи через точку
		и это может привести к различным багам. Например юзер может ввести данные через кириллицу
		example: personalMovieDB.movies[lastWatchedFilm] = rateLastWatchedFilm; OK
				 personalMovieDB.movies.lastWatchedFilm = rateLastWatchedFilm; NOT OK (Source: consoleApp.js)
	2) Тернарные операторы - это другой метод написания условий в жаваскрипте. Пишется оно таким образом:
		(ставится какое то условие) ? (в случае правдивости условия выполняется какое то действие) : (в случае невыполнения условия идет действие в этом скоупе)
		example: (correct == 'yes') ? (console.log("Yes, you were right")) : ("Nope. The answer was yes");
		? = для действия в случае подвтерждения условия
		: = для действия в обратном/другом случае.
		Тернарным называется пушто в нем задействованы три аргумента
		например в случае примера выше это 1.само условие
											2. действие в случае после подвтерждения условия
											3. действие в случае невыполнения условия.

	3) Помимо оператора break, который прерывает текущий шаг есть оператор continue, который просто пропускает заданный шаг.
		
